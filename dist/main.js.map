{"mappings":";;;;;;;;;;ACAA;AAEA;;;;;;;;;;;;;;;;;;GAkBG,CACH,MAAM,yCAAQ,GAAG,CAAC,OAAO,EAAE,QAAQ,GAAG,KAAK,GAAK;IAC9C,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,CAAA,GAAA,qBAAQ,CAAA,CAAC,MAAM,CAAC;IAC5C,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAA,GAAA,qBAAQ,CAAA,CAAC,IAAI,CAAC;IACtC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAA,GAAA,qBAAQ,CAAA,CAAC,IAAI,CAAC;IAExC,iFAAiF;IACjF,wFAAwF;IACxF,wCAAwC;IACxC,MAAM,GAAG,GAAG,CAAA,GAAA,wBAAW,CAAA,CAAC,IAAM;QAC5B,SAAS,CAAC,SAAS,CAAC;QAEpB,OAAO,OAAO,EAAE,CACb,IAAI,CAAC,CAAC,GAAG,GAAK;YACb,OAAO,CAAC,GAAG,CAAC;YACZ,SAAS,CAAC,SAAS,CAAC;SACrB,CAAC,CACD,KAAK,CAAC,CAAC,GAAG,GAAK;YACd,mBAAmB;YACnB,QAAQ,CAAC,GAAG,CAAC;YACb,SAAS,CAAC,OAAO,CAAC;SACnB,CAAC,CAAA;KACL,EAAE;QAAC,OAAO;KAAC,CAAC;IAEb,qFAAqF;IACrF,wDAAwD;IACxD,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;KACrB,EAAE;QAAC,QAAQ;QAAE,GAAG;KAAC,CAAC;IAEnB,OAAO;aAAE,GAAG;cAAE,IAAI;gBAAE,MAAM;eAAE,KAAK;KAAE,CAAA;CACpC;;ADnDD;AEAA;ACAO,MAAM,yCAAU,GAAG,CAAC,KAAK,GAAK;IACnC,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,OAAO,KAAK,CAAA;IAC5C,OAAO,KAAK,KAAK,MAAM,GAAG,IAAI,GAAG,KAAK,CAAA;CACvC;;;ADAD;;;;;;;;;;GAUG,CAEH,MAAM,6BAAO,GAAG,CAAC,KAAK,EAAE,MAAM,GAAK;IACjC,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAK,CAAA,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,OAAO,CAAA,AAAC,EACzE,OAAO,CAAA,GAAA,yCAAU,CAAA,CAAC,MAAM,CAAC,CAAA;IAE3B,OAAO,MAAM,CAAA;CACd;AAED,MAAM,yCAAe,GAAG,CAAC,GAAG,EAAE,YAAY,GAAG,EAAE,GAAK;IAClD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAA,GAAA,uBAAU,CAAA,CAAC,6BAAO,EAAE,YAAY,CAAC;IAE3D,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;YACnD,QAAQ,CAAC,UAAU,IAAI,YAAY,CAAC;SACrC;KACF,EAAE;QAAC,YAAY;QAAE,GAAG;KAAC,CAAC;IAEvB,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;KACxC,EAAE;QAAC,GAAG;QAAE,KAAK;KAAC,CAAC;IAEhB,OAAO;QAAC,KAAK;QAAE,QAAQ;KAAC,CAAA;CACzB;;;AEnBD;ACNA;;;;AAIA,MAAM,yCAAsB,iBAAG,CAAA,GAAA,0BAAa,CAAA,EAAE;AAE9C,MAAM,yCAAuB,GAAG,CAAC,YAAE,QAAQ,CAAA,EAAE,GAAK;IAChD,gEAAgE;IAChE,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GAAG,CAAA,GAAA,yCAAe,CAAA,CACrE,sBAAsB,EACtB,KAAK,CACN;IACD,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,CAAA,GAAA,yCAAe,CAAA,CACjE,oBAAoB,EACpB,KAAK,CACN;IACD,MAAM,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,GAAG,CAAA,GAAA,yCAAe,CAAA,CACzE,wBAAwB,EACxB,KAAK,CACN;IAED,gEAAgE;IAChE,2DAA2D;IAC3D,MAAM,uBAAuB,GAAG,CAAA,GAAA,mBAAM,CAAA,CAAC,IAAI,CAAC;IAC5C,MAAM,qBAAqB,GAAG,CAAA,GAAA,mBAAM,CAAA,CAAC,IAAI,CAAC;IAC1C,MAAM,qBAAqB,GAAG,CAAA,GAAA,mBAAM,CAAA,CAAC,IAAI,CAAC;IAE1C,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,uBAAuB,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CACjD,kCAAkC,CACnC,CAAC,OAAO;QACT,qBAAqB,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAC/C,gCAAgC,CACjC,CAAC,OAAO;QACT,qBAAqB,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAC/C,8BAA8B,CAC/B,CAAC,OAAO;QAET,0FAA0F;QAE1F,IAAI,uBAAuB,CAAC,OAAO,EAAE,uBAAuB,CAAC,IAAI,CAAC;QAClE,IAAI,qBAAqB,CAAC,OAAO,EAAE,qBAAqB,CAAC,IAAI,CAAC;QAC9D,IAAI,qBAAqB,CAAC,OAAO,EAAE,yBAAyB,CAAC,IAAI,CAAC;KACnE,EAAE;QAAC,yBAAyB;QAAE,qBAAqB;QAAE,uBAAuB;KAAC,CAAC;IAE/E,kFAAkF;IAClF,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,GAAA,yCAAU,CAAA,CAAC,oBAAoB,CAAC,GAAG,KAAK,GAAG,QAAQ,CAAC,CAC1E,mBAAmB,CACpB;KACF,EAAE;QAAC,oBAAoB;KAAC,CAAC;IAE1B,qBACE,gCAAC,yCAAsB,CAAC,QAAQ;QAC9B,KAAK,EAAE;oCACL,sBAAsB;uCACtB,yBAAyB;gCACzB,kBAAkB;mCAClB,qBAAqB;kCACrB,oBAAoB;qCACpB,uBAAuB;SACxB;kBAEA,QAAQ;MACuB,CACnC;CACF;;;;ADxDD,MAAM,yCAAY,GAAG,IAAM;IACzB,MAAM,0BACJ,sBAAsB,CAAA,6BACtB,yBAAyB,CAAA,sBACzB,kBAAkB,CAAA,yBAClB,qBAAqB,CAAA,wBACrB,oBAAoB,CAAA,2BACpB,uBAAuB,CAAA,IACxB,GAAG,CAAA,GAAA,uBAAU,CAAA,CAAC,CAAA,GAAA,yCAAsB,CAAA,CAAC;IAEtC,MAAM,4BAA4B,GAAG,IAAM;QACzC,yBAAyB,CAAC,CAAC,CAAA,GAAA,yCAAU,CAAA,CAAC,sBAAsB,CAAC,CAAC;KAC/D;IAED,MAAM,wBAAwB,GAAG,IAAM;QACrC,qBAAqB,CAAC,CAAC,CAAA,GAAA,yCAAU,CAAA,CAAC,kBAAkB,CAAC,CAAC;KACvD;IAED,MAAM,0BAA0B,GAAG,IAAM;QACvC,uBAAuB,CAAC,CAAC,CAAA,GAAA,yCAAU,CAAA,CAAC,oBAAoB,CAAC,CAAC;KAC3D;IAED,OAAO;gCACL,sBAAsB;sCACtB,4BAA4B;4BAC5B,kBAAkB;kCAClB,wBAAwB;8BACxB,oBAAoB;oCACpB,0BAA0B;KAC3B,CAAA;CACF;;","sources":["src/index.js","src/hooks/use-async.js","src/hooks/use-local-storage.js","src/lib/cast-to-bool.js","src/hooks/use-user-prefs.js","src/contexts/user-prefs-context.js"],"sourcesContent":["import { useAsync } from \"./hooks/use-async\"\nimport { useLocalStorage } from \"./hooks/use-local-storage\"\nimport { useUserPrefs } from \"./hooks/use-user-prefs\"\n\nexport { useAsync, useLocalStorage, useUserPrefs }\n","import { useCallback, useEffect, useState } from \"react\"\n\n/**\n * useAsync\n *\n * @param {Function} asyncFn - The asynchronous function to run\n * @param {Boolean} [deferred=false] - whether to save the function to a variable\n * for later use (true) or run it instantly (false).\n * @returns {Object} Properties include a run() function which is used to subsequently\n * call the function (if deferred); the resulting data; and the status and error states.\n *\n * @example\n * Run it instantly:\n * const { data, status, error } = useAsync(fetch(\"https://my-cool-api.com/some-endpoint\"))\n * console.log(data)\n *\n * Deferred execution:\n * const { run, data, status, error } = useAsync(fetch(\"https://my-cool-api.com/some-endpoint\"))\n * const handleClick = (event) => run()\n *\n */\nconst useAsync = (asyncFn, deferred = false) => {\n  const [status, setStatus] = useState(\"idle\")\n  const [data, setData] = useState(null)\n  const [error, setError] = useState(null)\n\n  // Wrapping the call to the async function in a callback which manages some state\n  // around the function itself. This also has the benefit of \"caching\" it, so the asyncFn\n  // won't get redeclared on every render:\n  const run = useCallback(() => {\n    setStatus(\"pending\")\n\n    return asyncFn()\n      .then((res) => {\n        setData(res)\n        setStatus(\"success\")\n      })\n      .catch((err) => {\n        // console.log(err)\n        setError(err)\n        setStatus(\"error\")\n      })\n  }, [asyncFn])\n\n  // Default is to call run() as soon as the hook is used, but you can also \"defer\" its\n  // usage, since it's stored in the returned \"run\" value:\n  useEffect(() => {\n    if (!deferred) run()\n  }, [deferred, run])\n\n  return { run, data, status, error }\n}\n\nexport { useAsync }\n","import { useEffect, useReducer } from \"react\"\nimport { castToBool } from \"../lib/cast-to-bool\"\n\n/**\n * Manage state which also gets saved to the browser's localStorage\n *\n * @param {String} key - the localStorage key\n * @param {*} [defaultValue=\"\"] - the localStorage value. Stringification is up to you to do.\n * @returns {Array} an array containing the state and an update function\n *\n * @example\n * const [favoriteFruit, setFavoriteFruit] = useLocalStorage(\"fruit\", \"apple\")\n *\n */\n\nconst reducer = (state, action) => {\n  if (typeof action === \"string\" && (action === \"true\" || action === \"false\")) {\n    return castToBool(action)\n  }\n  return action\n}\n\nconst useLocalStorage = (key, defaultValue = \"\") => {\n  const [state, setState] = useReducer(reducer, defaultValue)\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const savedState = window.localStorage.getItem(key)\n      setState(savedState || defaultValue)\n    }\n  }, [defaultValue, key])\n\n  useEffect(() => {\n    window.localStorage.setItem(key, state)\n  }, [key, state])\n\n  return [state, setState]\n}\n\nexport { useLocalStorage }\n","export const castToBool = (input) => {\n  if (typeof input === \"boolean\") return input\n  return input === \"true\" ? true : false\n}\n","/**\n * This is a wrapper around UserPreferencesContext\n * It gives you access to common accessibility preferences which are\n * stored in localStorage, and the ability to toggle these preferences\n * on and off (prefers-reduced-motion, for example).\n *\n * @example\n * const { prefersReducedMotion, togglePrefersReducedMotion } = useUserPrefs()\n *\n * // or, for more manageable variable names, feel free to alias them:\n *\n * const {\n *   prefersReducedMotion: rm,\n *   togglePrefersReducedMotion: toggleRm\n * } = useUserPrefs()\n *\n */\n\nimport { useContext } from \"react\"\nimport { UserPreferencesContext } from \"../contexts/user-prefs-context\"\nimport { castToBool } from \"../lib/cast-to-bool\"\n\nconst useUserPrefs = () => {\n  const {\n    prefersDarkColorScheme,\n    setPrefersDarkColorScheme,\n    prefersReducedData,\n    setPrefersReducedData,\n    prefersReducedMotion,\n    setPrefersReducedMotion,\n  } = useContext(UserPreferencesContext)\n\n  const togglePrefersDarkColorScheme = () => {\n    setPrefersDarkColorScheme(!castToBool(prefersDarkColorScheme))\n  }\n\n  const togglePrefersReducedData = () => {\n    setPrefersReducedData(!castToBool(prefersReducedData))\n  }\n\n  const togglePrefersReducedMotion = () => {\n    setPrefersReducedMotion(!castToBool(prefersReducedMotion))\n  }\n\n  return {\n    prefersDarkColorScheme,\n    togglePrefersDarkColorScheme,\n    prefersReducedData,\n    togglePrefersReducedData,\n    prefersReducedMotion,\n    togglePrefersReducedMotion,\n  }\n}\n\nexport { useUserPrefs }\n","/**\n * Maintains a globally-available data store for the user's a11y preferences.\n *\n * This keeps track of the following properties:\n * - prefersReduceMotion\n * - prefersReducedData\n * - prefersDarkColorScheme\n *\n * For the most part, you should use the `useUserPrefs` interface\n * to work with this context (see `/hooks/use-user-prefs.js`)\n */\n\nimport { createContext, useEffect, useRef } from \"react\"\nimport { useLocalStorage } from \"../hooks/use-local-storage\"\nimport { castToBool } from \"../lib/cast-to-bool\"\n\nconst UserPreferencesContext = createContext()\n\nconst UserPreferencesProvider = ({ children }) => {\n  // Create our state for all values we want to store client-side:\n  const [prefersReducedMotion, setPrefersReducedMotion] = useLocalStorage(\n    \"prefersReducedMotion\",\n    false\n  )\n  const [prefersReducedData, setPrefersReducedData] = useLocalStorage(\n    \"prefersReducedData\",\n    false\n  )\n  const [prefersDarkColorScheme, setPrefersDarkColorScheme] = useLocalStorage(\n    \"prefersDarkColorScheme\",\n    false\n  )\n\n  // Bind references to the user's operating-system-level settings\n  // for reduced motion, reduced data, and prefers dark mode:\n  const reducedMotionMediaQuery = useRef(null)\n  const reducedDataMediaQuery = useRef(null)\n  const colorSchemeMediaQuery = useRef(null)\n\n  useEffect(() => {\n    reducedMotionMediaQuery.current = window.matchMedia(\n      \"(prefers-reduced-motion: reduce)\"\n    ).matches\n    reducedDataMediaQuery.current = window.matchMedia(\n      \"(prefers-reduced-data: reduce)\"\n    ).matches\n    colorSchemeMediaQuery.current = window.matchMedia(\n      \"(prefers-color-scheme: dark)\"\n    ).matches\n\n    // Update our settings if there are any operating-system-level settings on the user's end:\n\n    if (reducedMotionMediaQuery.current) setPrefersReducedMotion(true)\n    if (reducedDataMediaQuery.current) setPrefersReducedData(true)\n    if (colorSchemeMediaQuery.current) setPrefersDarkColorScheme(true)\n  }, [setPrefersDarkColorScheme, setPrefersReducedData, setPrefersReducedMotion])\n\n  // Anytime a localStorage value changes — including on initial render — update it:\n  useEffect(() => {\n    document.body.classList[castToBool(prefersReducedMotion) ? \"add\" : \"remove\"](\n      \"is-reduced-motion\"\n    )\n  }, [prefersReducedMotion])\n\n  return (\n    <UserPreferencesContext.Provider\n      value={{\n        prefersDarkColorScheme,\n        setPrefersDarkColorScheme,\n        prefersReducedData,\n        setPrefersReducedData,\n        prefersReducedMotion,\n        setPrefersReducedMotion,\n      }}\n    >\n      {children}\n    </UserPreferencesContext.Provider>\n  )\n}\n\nexport { UserPreferencesProvider, UserPreferencesContext }\n"],"names":[],"version":3,"file":"main.js.map"}